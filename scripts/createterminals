#!/bin/bash

if [ $# -lt 1 ]; then
	echo "Usage: $0 NUMBER_OF_USERS"
    echo "This script will create terminal pods starting from user1, up"
    echo "to the specified number. The password for each user is openshift."
	exit 1
fi

MAX=$1
PROJ=terminals

cd `dirname $0`
BASE=`pwd`
cd - >> /dev/null

oc get project $PROJ &> /dev/null
if [ "$?" -eq "0" ]; then
  oc project $PROJ >> /dev/null
else
  oc new-project $PROJ >> /dev/null
fi

set -e

# Use the SCL Go CentOS builder image.
# We have a custom assemble script in .s2i/bin/.
#
oc new-build \
  docker.io/centos/go-toolset-7-centos7~https://github.com/kwkoo/gotty.git \
  --name gotty-builder

sleep 3

# If we specify the Dockerfile instead of piping it from stdin, new-build will
# attempt to start the build immediately instead of waiting for the source
# image to be ready.
#
cat ${BASE}/../Dockerfile.openshift \
| oc new-build \
  --name gotty \
  --source-image=gotty-builder \
  --source-image-path=/opt/app-root/output/.:. \
  --dockerfile="-" \
  --allow-missing-imagestream-tags \
  --strategy=docker

sleep 3

INDEX=0
while [ "$INDEX" -lt "$MAX" ]; do
    INDEX=$((INDEX+1))
    USERNAME="user${INDEX}"
    echo "Creating ${USERNAME}..."
    oc new-app \
      gotty \
      --allow-missing-imagestream-tags \
      -e USER=user \
      -e HOME=/home/user \
      -e OPTIONS="-c $USERNAME:openshift" \
      --name=${USERNAME}
    oc expose dc/${USERNAME} --port 8080
    oc expose svc/${USERNAME}
    oc patch route/${USERNAME} --patch='{"spec":{"tls":{"termination":"edge"}}}'
done